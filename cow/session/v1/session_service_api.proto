syntax = "proto3";

package cow.session.v1;

import "cow/session/v1/types.proto";

option go_package = "github.com/cownetwork/session/v1;session";
option java_package = "network.cow.mooapis.session.v1";
option java_multiple_files = true;

message CreateSessionRequest {
    // The player to create the session for.
    string player_id = 1;
}

message CreateSessionResponse {
    // The session created by this service.
    Session session = 1;
}

message GetSessionRequest {
    SessionIdentifier identifier = 1;
}

message GetSessionResponse {
    // The requested session.
    Session session = 1;
}

message StopSessionRequest {
    SessionIdentifier identifier = 1;

    // The reason why the session is being stopped.
    oneof cause {
        StopCauseUnknown unknown = 2;
        StopCauseDisconnected disconnected = 3;
        StopCauseError error = 4;
        StopCauseCustom custom = 5;
    }
}

message StopSessionResponse {
    // The session that has been stopped (if not already).
    Session session = 1;
}

message KickPlayerRequest {
    // The player to kick.
    string player_id = 1;

    // The reason for the kick.
    string reason = 2;

    // The initiator of the ban.
    Executor executor = 3;
}

message KickPlayerResponse {
    // The resulting kick.
    Kick kick = 1;
}

message BanPlayerRequest {
    // The player to ban.
    string player_id = 1;

    // The reason for the ban.
    string reason = 2;

    // The unix timestamp of the ban.
    uint64 banned_at = 3;

    // The duration of this ban in seconds, starting from the banned_at timestamp.
    int64 duration = 4;

    // The initiator of the ban.
    Executor executor = 5;
}

message BanPlayerResponse {
    // The resulting ban.
    Ban ban = 1;
}

message GetBansRequest {
    // The player to receive ban information for.
    string player_id = 1;
}

message GetBansResponse {
    // All bans associated to the given player.
    repeated Ban bans = 1;
}

message RevokeBanRequest {
    // The unique identifier of the ban.
    string id = 1;

    // The initiator of the ban.
    Executor executor = 2;
}

message RevokeBanResponse {
    // The revoked ban.
    Ban ban = 1;
}

message SetMaintenanceModeRequest {
    // The session types affected by the maintenance mode.
    repeated string types = 1;

    // Whether the maintenance mode should be enabled for the given types.
    bool enabled = 2;
}

message SetMaintenanceModeResponse {
    // The session types affected by the change.
    repeated string types = 1;
}

message BlacklistPlayerRequest {
    // The player to blacklist.
    string player_id = 1;

    // The message to show the blacklisted player upon connecting.
    string message = 2;
}

message BlacklistPlayerResponse {
    // The resulting blacklist entry.
    BlacklistEntry entry = 1;
}

message RevokeBlacklistPlayerRequest {
    // The player to revoke the blacklist for.
    string player_id = 1;
}

message RevokeBlacklistPlayerResponse {
    // The player the blacklist entry has been revoked for.
    string player_id = 1;
}

// Service definition
service SessionService {
    // creates a new session
    rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);

    // stops and removes a session
    rpc StopSession(StopSessionRequest) returns (StopSessionResponse);

    // retrieves information about a existing session
    rpc GetSession(GetSessionRequest) returns (GetSessionResponse);

    // kicks the given player
    rpc KickPlayer(KickPlayerRequest) returns (KickPlayerResponse);

    // bans the given player
    rpc BanPlayer(BanPlayerRequest) returns (BanPlayerResponse);

    // retrieves all bans associated to a player
    rpc GetBans(GetBansRequest) returns (GetBansResponse);

    // revoke a ban
    rpc RevokeBan(RevokeBanRequest) returns (RevokeBanResponse);

    // enables or disabled maintenance mode
    rpc SetMaintenanceMode(SetMaintenanceModeRequest) returns (SetMaintenanceModeResponse);

    // blacklists a player
    rpc BlacklistPlayer(BlacklistPlayerRequest) returns (BlacklistPlayerResponse);

    // revokes the blacklist entry of a player
    rpc RevokeBlacklistPlayer(RevokeBlacklistPlayerRequest) returns (RevokeBlacklistPlayerResponse);
}
