syntax = "proto3";

package cow.indigo.v1;

option go_package = "github.com/cownetwork/indigo/v1;indigo";
option java_package = "network.cow.mooapis.indigo.v1";
option java_multiple_files = true;

// Service definition
service IndigoService {
    // Checks if a given user account would succeed the permission
    // check of given permissions. For that the roles and the custom
    // permissions of the user will be used.
    rpc HasPermission (HasPermissionRequest) returns (HasPermissionResponse);

    // List all existing roles.
    rpc ListRoles (ListRolesRequest) returns (ListRolesResponse);

    // Gets the role with specific name.
    rpc GetRole (GetRoleRequest) returns (GetRoleResponse);

    // Inserts a new role, if it doesn't exist.
    rpc InsertRole (InsertRoleRequest) returns (InsertRoleResponse);

    // Updates a roles settings (like priority, ...).
    rpc UpdateRole (UpdateRoleRequest) returns (UpdateRoleResponse);

    // Deletes a role if it exists.
    rpc DeleteRole (DeleteRoleRequest) returns (DeleteRoleResponse);

    // Add multiple or one permission to given role, if the role exists.
    rpc AddRolePermissions (AddRolePermissionsRequest) returns (AddRolePermissionsResponse);

    // Remove multiple or one permission from given role, if the role exists.
    rpc RemoveRolePermissions (RemoveRolePermissionsRequest) returns (RemoveRolePermissionsResponse);

    // Returns a user by account id.
    rpc GetUser (GetUserRequest) returns (GetUserResponse);

    // Get all roles that are bound to given user.
    rpc GetUserRoles (GetUserRolesRequest) returns (GetUserRolesResponse);

    // Binds an existing role to the user.
    rpc AddUserRoles (AddUserRolesRequest) returns (AddUserRolesResponse);

    // Unbinds a role from the user.
    rpc RemoveUserRoles (RemoveUserRolesRequest) returns (RemoveUserRolesResponse);

    // Get all custom bound permissions of given user. 
    rpc GetUserPermissions (GetUserPermissionsRequest) returns (GetUserPermissionsResponse);

    // Binds custom permissions to given user.
    rpc AddUserPermissions (AddUserPermissionsRequest) returns (AddUserPermissionsResponse);

    // Unbinds custom permissions from given user.
    rpc RemoveUserPermissions (RemoveUserPermissionsRequest) returns (RemoveUserPermissionsResponse);
}

// ===================
// global
// ===================

message HasPermissionRequest {
    string user_account_id = 1;
    repeated string permissions = 2;
}

message HasPermissionResponse {
    bool result = 1;
}

// ===================
// actions with roles
// ===================

message ListRolesRequest {
}

message ListRolesResponse {
    repeated Role roles = 1;
}

message GetRoleRequest {
    RoleIdentifier role_id = 1;
}

message GetRoleResponse {
    Role role = 1;
}

message InsertRoleRequest {
    Role role = 1;
}

message InsertRoleResponse {
    Role inserted_role = 1;
}

message UpdateRoleRequest {
    RoleIdentifier role_id = 1;
    Role role_data = 2;
}

message UpdateRoleResponse {
    Role updated_role = 1;
}

message DeleteRoleRequest {
    RoleIdentifier role_id = 1;
}

message DeleteRoleResponse {
}

message AddRolePermissionsRequest {
    RoleIdentifier role_id = 1;
    repeated string permissions = 2;
}

message AddRolePermissionsResponse {
    repeated string added_permissions = 1;
}

message RemoveRolePermissionsRequest {
    RoleIdentifier role_id = 1;
    repeated string permissions = 2;
}

message RemoveRolePermissionsResponse {
    repeated string removed_permissions = 1;
}

// ===================
// actions with users
// ===================

message GetUserRequest {
    string user_account_id = 1;
}

message GetUserResponse {
    User user = 1;
}

message GetUserRolesRequest {
    string user_account_id = 1;
}

message GetUserRolesResponse {
    repeated Role roles = 2;
}

message AddUserRolesRequest {
    string user_account_id = 1;
    repeated RoleIdentifier role_ids = 2;
}

message AddUserRolesResponse {
    repeated string added_role_ids = 1;
}

message RemoveUserRolesRequest {
    string user_account_id = 1;
    repeated RoleIdentifier role_ids = 2;
}

message RemoveUserRolesResponse {
    repeated string removed_role_ids = 1;
}

message GetUserPermissionsRequest {
    string user_account_id = 1;
}

message GetUserPermissionsResponse {
    repeated string permissions = 1;
}

message AddUserPermissionsRequest {
    string user_account_id = 1;
    repeated string permissions = 2;
}

message AddUserPermissionsResponse {
    repeated string added_permissions = 1;
}

message RemoveUserPermissionsRequest {
    string user_account_id = 1;
    repeated string permissions = 2;
}

message RemoveUserPermissionsResponse {
    repeated string removed_permissions = 1;
}

message Role {
    // The id of the role, i.e. a uuid
    string id = 1;

    // Name of the role, e.g. `admin`.
    string name = 2;

    // Type of the role, e.g. `minecraft`
    string type = 3;

    // Priority of the role is used when multiple roles
    // get assigned to a user and we have to determine which
    // properties get inherited or overwritten by which roles.
    int32 priority = 4;

    // Transient means that the role is simply used for inheritance purposes
    // and will not overwrite any permissions from any role.
    // The exception is when checking with two transient roles, than the priority
    // will be used to determine which overwrites which.
    bool transient = 5;

    // A hex color string (e.g. `4a2f30`) to set the general display color
    // for this role across all systems (Minecraft network, webpages, ...).
    string color = 6;

    // A list of permissions that are directly binded to this role.
    // A permission is a dot seperated string which only contains [a-Z0-9\*].
    repeated string permissions = 7;
}

message User {
    // The id of the user, can be a UUID or some other kind of string.
    string account_id = 1;

    // All roles that are bound to the user.
    repeated Role roles = 2;

    // All custom permissions that are bound to the user.
    repeated string custom_permissions = 3;
}

message RoleIdentifier {
    oneof id {
        string uuid = 1;
        RoleNameIdentifier name_id = 2;
    }
}

message RoleNameIdentifier {
    string name = 1;
    string type = 2;
}